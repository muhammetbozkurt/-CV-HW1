import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QVBoxLayout, QSizePolicy, QMessageBox, QWidget, \
    QPushButton, QGroupBox, QAction, QFileDialog,qApp,QErrorMessage 
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import QGridLayout
from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import numpy as np
import cv2


class App(QMainWindow):

    def __init__(self):
        super(App, self).__init__()
        self.inputLoaded = False
        self.targetLoaded = False
        self.nameOfInput =""
        self.nameOfTarget=""
        self.title = 'Histogram Equalization'
        self.setGeometry(50,50,1100,1000)
        openInputAction=QAction("&Open input",self)
        openInputAction.triggered.connect(self.openInputImage)
        openTargetAction=QAction("&Open target",self)
        openTargetAction.triggered.connect(self.openTargetImage)
        exitAction = QAction("&Exit",self)
        exitAction.triggered.connect(sys.exit)

        self.statusBar()

        mainMenu = self.menuBar()
        fileMenu = mainMenu.addMenu("&File")
        fileMenu.addAction(openInputAction)
        fileMenu.addAction(openTargetAction)
        fileMenu.addAction(exitAction)

        self.blue_target = PlotCanvas(self,width=3, height=1.2)
        self.blue_target.move(400,500)
        self.red_target = PlotCanvas(self,width=3, height=1.2)
        self.red_target.move(400,650)
        self.green_target = PlotCanvas(self,width=3, height=1.2)
        self.green_target.move(400,800)

        self.blue_input = PlotCanvas(self,width=3, height=1.2)
        self.blue_input.move(50,500)
        self.red_input = PlotCanvas(self,width=3, height=1.2)
        self.red_input.move(50,650)
        self.green_input = PlotCanvas(self,width=3, height=1.2)
        self.green_input.move(50,800)

        self.blue_re= PlotCanvas(self,width=3, height=1.2)
        self.blue_re.move(750,500)
        self.red_re = PlotCanvas(self,width=3, height=1.2)
        self.red_re.move(750,650)
        self.green_re = PlotCanvas(self,width=3, height=1.2)
        self.green_re.move(750,800)

        self.initUI()

    def openInputImage(self):
        nameOfInput = QFileDialog.getOpenFileName(self,"Open input")
        self.nameOfInput=nameOfInput[0]
        if self.nameOfInput:
        	self.inputLoaded=True
        	self.labelINPUT.setPixmap(QPixmap(self.nameOfInput))
        	self.blue_input.plotHistogram(self.hist_maker(cv2.imread(self.nameOfInput),0))
        	self.red_input.plotHistogram(self.hist_maker(cv2.imread(self.nameOfInput),2))
        	self.green_input.plotHistogram(self.hist_maker(cv2.imread(self.nameOfInput),1))

    def openTargetImage(self):
        nameOfTarget = QFileDialog.getOpenFileName(self,"Open target")
        self.nameOfTarget=nameOfTarget[0]
        if nameOfTarget:
        	self.targetLoaded=True
        	self.labelTARGET.setPixmap(QPixmap(self.nameOfTarget))
        	self.blue_target.plotHistogram(self.hist_maker(cv2.imread(self.nameOfTarget),0))
        	self.red_target.plotHistogram(self.hist_maker(cv2.imread(self.nameOfTarget),2))
        	self.green_target.plotHistogram(self.hist_maker(cv2.imread(self.nameOfTarget),1))        	

    def initUI(self):
        extractAction = QAction('Histogram Equalization',self)
        extractAction.triggered.connect(self.histogramButtonClicked)

        self.toolbar = self.addToolBar("Extraction")
        self.toolbar.addAction(extractAction)

        self.labelINPUT=QLabel(self)
        self.labelINPUT.setGeometry(50,20,300,500)
        self.labelTARGET=QLabel(self)
        self.labelTARGET.setGeometry(400,20,300,500)
        self.labelResult=QLabel(self)
        self.labelResult.setGeometry(750,20,300,500)

        self.show()


    def cumulative_prob_hist(hist,px,self):
	    cumuProb = np.zeros(256)
	    cumuProb[0]=hist[0]
	    for i in range(1,256):
	        cumuProb[i] = cumuProb[i-1] + hist[i]
	    cumuProb /= px
	    return cumuProb

    def histogramButtonClicked(self):
        error_message = QErrorMessage(self)
        if not self.inputLoaded and not self.targetLoaded:
            error_message.setWindowTitle("Input error")
            error_message.showMessage('First load input and target images')

        if not self.inputLoaded and self.targetLoaded:
            error_message.setWindowTitle("Input error")
            error_message.showMessage('Load input image')
        elif not self.targetLoaded:
            error_message.setWindowTitle("Input error")
            error_message.showMessage('Load target image')
        else:
    	    I = cv2.imread(self.nameOfInput)
    	    T = cv2.imread(self.nameOfTarget)
    	    I = self.matching(I,T,0)
    	    I = self.matching(I,T,1)
    	    I = self.matching(I,T,2)
    	    cv2.imwrite('result.png',I)
    	    self.labelResult.setPixmap(QPixmap("result.png"))
    	    self.blue_re.plotHistogram(self.hist_maker(cv2.imread('result.png'),0))
    	    self.red_re.plotHistogram(self.hist_maker(cv2.imread('result.png'),2))
    	    self.green_re.plotHistogram(self.hist_maker(cv2.imread('result.png'),1))


    def hist_maker(self,image,index):
        height, width, _ =image.shape
        hist=np.zeros(256)
        for i in range(256):
        	for j in range(height):
        		for k in range(width):
        			if(i==image.item(j,k,index)):
        				hist[i]+=1
        return hist

    def cumulative_prob_hist(self,hist,px):
    	cumuProb = np.zeros(256)
    	cumuProb[0]=hist[0]
    	for i in range(1,256):
    		cumuProb[i] = cumuProb[i-1] + hist[i]
    	cumuProb /= px
    	return cumuProb

    def matching(self,input_image,target_image,index):
    	x,y,z=target_image.shape
    	target_imageProb = self.cumulative_prob_hist(self.hist_maker(target_image,index),x*y)
    	x,y,z=input_image.shape
    	input_imageProb=self.cumulative_prob_hist(self.hist_maker(input_image,index),x*y)
    	new_values=np.zeros(256)
    	for i in range(256):
    		j=255
    		while True:
    			new_values.itemset(i,j)
    			j-=1
    			if j<0 or input_imageProb[i]>target_imageProb[j]:
    				break
    	for i in range(x):
    		for j in range(y):
    			intensity=input_image.item(i,j,index)
    			input_image.itemset((i,j,index),new_values[intensity])
    	return input_image

class PlotCanvas(FigureCanvas):  
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        # Init Canvas
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self,
        	QSizePolicy.Expanding,
        	QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def plotHistogram(self, hist):
        # Plot histogram
        ax = self.figure.add_subplot(111)
        ax.plot(hist, 'r-')

        self.draw()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
